{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "glog-e3378c7a-a8f1-47f0-8d68-ac0708a5c0c1",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string up to but not including the first null character. If the string does not have a null character, `strlen` will continue reading memory until it encounters one, which can lead to buffer overflows, memory corruption, and other security issues.\n\nIn the provided code snippet `strlen(\"TYPE_\")`, there is no direct vulnerability as the string is a constant and well-defined. However, if the string was replaced with a variable that could potentially not be null-terminated, it would pose a risk.\n\n## Mitigation Advice\n\nTo mitigate the risk of vulnerabilities associated with the `strlen` function:\n\n- Always ensure that strings are null-terminated.\n- Use safer alternatives to `strlen` when possible, such as `strnlen`, which takes a maximum length parameter and will not read past it.\n- Be cautious when using `strlen` in loops or with user-supplied input, as this can lead to denial of service attacks if the string is very long or does not contain a null character.\n\n## Source Code Fix Recommendation\n\nIn the provided code snippet, no fix is needed as the string is a constant. However, if the string was a variable, you could use `strnlen` to ensure that the function does not read past the end of the string:\n\n```cpp\n#include <string.h>\n\nchar str[] = \"TYPE_\";\nsize_t len = strnlen(str, sizeof(str));\n```\n\n## Library Dependencies\n\nThe `strlen` function is part of the C standard library, so no additional libraries are needed to use it.\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-126: Buffer Over-read](https://cwe.mitre.org/data/definitions/126.html)"
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "glog-e3378c7a-a8f1-47f0-8d68-ac0708a5c0c1",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libtorch_utils.cc"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 49,
                  "endLine": 113,
                  "endColumn": 64,
                  "charOffset": 3756,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"TYPE_\")",
                    "rendered": {
                      "text": "strlen(\"TYPE_\")",
                      "markdown": "`strlen(\"TYPE_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/libtorch_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3756,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"TYPE_\", <size of \"TYPE_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/libtorch_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3756,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"TYPE_\", <size of \"TYPE_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}