{
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "name": "Glog.AI",
          "organization": "Glog.AI",
          "fullName": "Glog, Making software more secure",
          "version": "1.0.0",
          "semanticVersion": "1.0.0",
          "informationUri": "https://www.glog.ai",
          "rules": [
            {
              "id": "cb081d28-4ec5-37d2-bd2f-cff3f2a23b0b",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the function `std::atoi()` is used, which does not check for errors and can lead to undefined behavior if the input string does not represent a valid integer.\n\n## Mitigation Advice\n\nAvoid using C library functions that do not perform error checking. Instead, use safer alternatives provided by the C++ Standard Library. For example, instead of `std::atoi()`, you can use `std::stoi()` which throws an exception if the conversion fails.\n\n## Source Code Fix Recommendation\n\nReplace `std::atoi()` with `std::stoi()` and handle the possible exceptions:\n\n```cpp\ntry {\n    ip_index = std::stoi(io_name.substr(start_pos + 2));\n} catch (const std::invalid_argument& ia) {\n    // Handle the exception\n} catch (const std::out_of_range& oor) {\n    // Handle the exception\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::string` and its member functions.\n- `<cstdlib>`: for `std::atoi()`.\n- `<stdexcept>`: for `std::invalid_argument` and `std::out_of_range`.\n\n## References\n\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n\nPlease note that the links are valid and active for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "72ecd950-d6af-3a1f-9a3a-cf7f5b7617ae",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of insecure C library functions that can lead to various security issues such as buffer overflows, format string vulnerabilities, integer overflows, etc. In this case, the `std::atoi` function is used, which does not check for errors, making it a potential source of vulnerabilities.\n\n## Mitigation Advice\n\nAvoid using C library functions that do not perform bounds checking or that do not provide mechanisms for error handling. Instead, use safer alternatives provided by the C++ Standard Library. In this case, you can use `std::stoi` instead of `std::atoi`.\n\n## Source Code Fix Recommendation\n\nReplace the `std::atoi` function with `std::stoi` function. The `std::stoi` function throws an exception if the conversion cannot be performed, which can be caught and handled appropriately.\n\n```cpp\ntry {\n    op_index = std::stoi(io_name.substr(start_pos + 2));\n} catch (std::invalid_argument const &e) {\n    // Handle the error, e.g., by logging it and returning from the function\n} catch (std::out_of_range const &e) {\n    // Handle the error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::string` and its member functions.\n- `<cstdlib>`: for `std::atoi`.\n- `<stdexcept>`: for `std::invalid_argument` and `std::out_of_range`.\n\n## References\n\n- [OWASP C++](https://owasp.org/www-pdf-archive/OWASP_SCP_Quick_Reference_Guide_v2.pdf)\n- [CWE-242: Use of Inherently Dangerous Function](https://cwe.mitre.org/data/definitions/242.html)\n\nPlease note that the links are valid and active for anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "067cb077-6ca0-3c7d-b082-03e341287518",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. In this case, the function `std::atoi()` is used, which can lead to integer overflow or underflow if the input string represents a number outside the range of representable integer values.\n\n## Mitigation Advice\n\nAvoid using `std::atoi()`. Instead, use safer alternatives such as `std::stoi()`, `std::stol()`, or `std::stoll()`, which throw exceptions if the converted value would fall out of the range of the result type or if the underlying function reports an error.\n\n## Source Code Fix Recommendation\n\nReplace `std::atoi()` with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    ip_index = std::stoi(tensor_name.substr(start_pos + 2).c_str());\n} catch (const std::out_of_range& oor) {\n    // Handle out of range error\n} catch (const std::invalid_argument& ia) {\n    // Handle invalid argument error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::string` and its member functions.\n- `<cstdlib>`: for `std::atoi()`.\n- `<stdexcept>`: for `std::out_of_range` and `std::invalid_argument`.\n\n## References\n\n- [CWE-681: Incorrect Conversion between Numeric Types](https://cwe.mitre.org/data/definitions/681.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "d8f1ea46-c7fc-310b-b0fe-ec2fbe035f46",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. In this case, the function `std::atoi()` is used, which can lead to integer overflow or underflow if the input string represents a number outside the range of representable integer values.\n\n## Mitigation Advice\n\nAvoid using `std::atoi()`. Instead, use safer alternatives such as `std::stoi()`, `std::stol()`, or `std::stoll()`, which throw exceptions if the converted value would fall out of the range of the result type or if the underlying function reports an error.\n\n## Source Code Fix Recommendation\n\nReplace `std::atoi()` with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    op_index = std::stoi(state_name.substr(start_pos + 2));\n} catch (const std::out_of_range& oor) {\n    // Handle out of range error\n} catch (const std::invalid_argument& ia) {\n    // Handle invalid argument error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::string` and its member functions.\n- `<cstdlib>`: for `std::atoi()`.\n- `<stdexcept>`: for `std::out_of_range` and `std::invalid_argument`.\n\n## References\n\n- [CWE-190: Integer Overflow or Wraparound](https://cwe.mitre.org/data/definitions/190.html)\n- [CWE-807: Reliance on Untrusted Inputs in a Security Decision](https://cwe.mitre.org/data/definitions/807.html)"
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            },
            {
              "id": "8ab07f0c-c792-3f08-bb65-26d4ad71bce7",
              "help": {
                "text": "",
                "markdown": "## Description\n\nThe `strlen` function in C++ is used to find the length of a string. However, it can lead to vulnerabilities if not used properly. The function counts the number of characters in a string up to but not including the first null character. If the string is not null-terminated, `strlen` will continue reading memory until it encounters a null character, which can lead to buffer overflows, memory corruption, and other undefined behavior.\n\nIn the provided code snippet, the `strlen` function is used to determine the length of the string \"TYPE_\". If the string \"TYPE_\" is not null-terminated, this could lead to a buffer overflow vulnerability.\n\n## Mitigation Advice\n\nTo mitigate this vulnerability, ensure that all strings are null-terminated before passing them to `strlen`. Additionally, consider using safer alternatives to `strlen`, such as `strnlen`, which takes a maximum length parameter and will not read past this length, even if it does not encounter a null character.\n\n## Source Code Fix Recommendation\n\nHere is a safer version of the provided code snippet:\n\n```cpp\nstd::string type_str = \"TYPE_\";\ndtype = data_type_str.substr(type_str.length());\n```\n\nIn this version, we use the `length` method of the `std::string` class, which is safer than `strlen` because it does not rely on null-termination.\n\n## Library Dependencies\n\nThe provided code snippet requires the following library:\n\n- `<string>`\n\n## References\n\n- [OWASP C++ Secure Coding Practices](https://cheatsheetseries.owasp.org/cheatsheets/C-Based_Toolchain_Hardening_Cheat_Sheet.html)\n- [CWE-119: Improper Restriction of Operations within the Bounds of a Memory Buffer](https://cwe.mitre.org/data/definitions/119.html)\n\nPlease note that the links provided are active and accessible to anonymous users at the time of writing."
              },
              "properties": {
                "tags": [
                  "DS140021"
                ]
              }
            },
            {
              "id": "9f6cb7eb-4ac3-3a7f-a3bf-ec5edae6fc97",
              "help": {
                "text": "",
                "markdown": "## Description\n\n\"Detected Prohibited C Function\" vulnerability in C++ refers to the use of certain C standard library functions that are known to be dangerous due to their potential to cause buffer overflows, format string vulnerabilities, or other problems. In this case, the function `std::atoi()` is used, which can lead to integer overflow or underflow if the input string represents a number outside the range of representable integer values.\n\n## Mitigation Advice\n\nAvoid using `std::atoi()`. Instead, use safer alternatives such as `std::stoi()`, `std::stol()`, or `std::stoll()`, which throw exceptions if the converted value would fall out of the range of the result type or if the underlying function reports an error.\n\n## Source Code Fix Recommendation\n\nReplace `std::atoi()` with `std::stoi()`. Here is the fixed code:\n\n```cpp\ntry {\n    ip_index = std::stoi(tensor_name.substr(start_pos + 2).c_str());\n} catch (const std::out_of_range& oor) {\n    // Handle out of range error\n} catch (const std::invalid_argument& ia) {\n    // Handle invalid argument error\n}\n```\n\n## Library Dependencies\n\nThe code example requires the following library dependencies:\n\n- `<string>`: for `std::string` and its member functions.\n- `<cstdlib>`: for `std::atoi()`.\n- `<stdexcept>`: for `std::out_of_range` and `std::invalid_argument`.\n\n## References\n\n- [CWE-681: Incorrect Conversion between Numeric Types](https://cwe.mitre.org/data/definitions/681.html)\n\nPlease note that the links provided are accessible to anonymous users at the time of writing this report."
              },
              "properties": {
                "tags": [
                  "DS154189"
                ]
              }
            }
          ],
          "language": "en-US",
          "contents": [
            "localizedData",
            "nonLocalizedData"
          ],
          "isComprehensive": false
        }
      },
      "language": "en-US",
      "results": [
        {
          "ruleId": "cb081d28-4ec5-37d2-bd2f-cff3f2a23b0b",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libtorch.cc"
                },
                "region": {
                  "startLine": 947,
                  "startColumn": 28,
                  "endLine": 947,
                  "endColumn": 32,
                  "charOffset": 34058,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "72ecd950-d6af-3a1f-9a3a-cf7f5b7617ae",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libtorch.cc"
                },
                "region": {
                  "startLine": 1163,
                  "startColumn": 24,
                  "endLine": 1163,
                  "endColumn": 28,
                  "charOffset": 42210,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "067cb077-6ca0-3c7d-b082-03e341287518",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libtorch.cc"
                },
                "region": {
                  "startLine": 864,
                  "startColumn": 20,
                  "endLine": 864,
                  "endColumn": 24,
                  "charOffset": 31229,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "d8f1ea46-c7fc-310b-b0fe-ec2fbe035f46",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libtorch.cc"
                },
                "region": {
                  "startLine": 1230,
                  "startColumn": 24,
                  "endLine": 1230,
                  "endColumn": 28,
                  "charOffset": 44724,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        },
        {
          "ruleId": "8ab07f0c-c792-3f08-bb65-26d4ad71bce7",
          "kind": "fail",
          "level": "note",
          "message": {
            "text": "Detected Vulnerability in C Function (strlen)"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libtorch_utils.cc"
                },
                "region": {
                  "startLine": 113,
                  "startColumn": 49,
                  "endLine": 113,
                  "endColumn": 64,
                  "charOffset": 3756,
                  "charLength": 15,
                  "snippet": {
                    "text": "strlen(\"TYPE_\")",
                    "rendered": {
                      "text": "strlen(\"TYPE_\")",
                      "markdown": "`strlen(\"TYPE_\")`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "fixes": [
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/libtorch_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3756,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strlen_s(\"TYPE_\", <size of \"TYPE_\">)"
                      }
                    }
                  ]
                }
              ]
            },
            {
              "description": {
                "text": "If a string is missing a null terminator, strlen will read past the end of the buffer"
              },
              "artifactChanges": [
                {
                  "artifactLocation": {
                    "uri": "src/libtorch_utils.cc"
                  },
                  "replacements": [
                    {
                      "deletedRegion": {
                        "charOffset": 3756,
                        "charLength": 15
                      },
                      "insertedContent": {
                        "text": "strnlen(\"TYPE_\", <size of \"TYPE_\">)"
                      }
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "DevSkimSeverity": "BestPractice",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.ProblematicFunction"
            ]
          }
        },
        {
          "ruleId": "9f6cb7eb-4ac3-3a7f-a3bf-ec5edae6fc97",
          "kind": "fail",
          "level": "warning",
          "message": {
            "text": "Detected Prohibited C Function"
          },
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "src/libtorch.cc"
                },
                "region": {
                  "startLine": 915,
                  "startColumn": 20,
                  "endLine": 915,
                  "endColumn": 24,
                  "charOffset": 33018,
                  "charLength": 4,
                  "snippet": {
                    "text": "atoi",
                    "rendered": {
                      "text": "atoi",
                      "markdown": "`atoi`"
                    }
                  },
                  "sourceLanguage": "cpp"
                }
              }
            }
          ],
          "properties": {
            "DevSkimSeverity": "Moderate",
            "DevSkimConfidence": "High",
            "tags": [
              "API.DangerousAPI.BannedFunction"
            ]
          }
        }
      ],
      "newlineSequences": [
        "\r\n",
        "\n"
      ]
    }
  ]
}